plugins {
    id "com.jfrog.bintray" version "1.7"
    id "com.github.dcendents.android-maven" version "1.5"
}

apply plugin: 'com.android.library'

ext {
    bintrayName = 'PrivacyStreams-core'
    artifact = 'privacystreams-core'

    libraryName = 'PrivacyStreams-core'
    libraryDescription = 'The core package in PrivacyStreams framework.'
    libraryVersion = "0.1.4"

    bintrayRepo = 'PrivacyStreams'
    bintrayOrganization = "privacystreams"
    publishedGroupId = 'com.github.privacystreams'

    siteUrl = 'https://github.com/ylimit/PrivacyStreams'
    gitUrl = 'https://github.com/ylimit/PrivacyStreams.git'
    githubRepository= 'ylimit/PrivacyStreams'

    developerId = 'ylimit'
    developerName = 'Yuanchun Li'
    developerEmail = 'pkulyc@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 14
        versionName "0.1.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

//    compile fileTree(include: ['*.jar'], dir: 'libs')
//    compile 'com.android.support:appcompat-v7:25.3.0'
//    compile 'org.apache.commons:commons-lang3:3.0'
//    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.greenrobot:eventbus:3.0.0'

    // third-party packages
    provided 'com.dropbox.core:dropbox-core-sdk:2.1.1'
    provided 'com.google.android.gms:play-services:10.2.4'
    provided('com.google.apis:google-api-services-gmail:v1-rev29-1.20.0'){
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    provided('com.google.api-client:google-api-client-android:1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    provided 'com.sun.mail:android-mail:1.5.5'
    provided 'com.sun.mail:android-activation:1.5.5'
    provided 'com.easilydo:sift-sdk:1.0.0'
    compile 'com.android.support:multidex:1.0.1'
}

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

version = libraryVersion

task doc_gen(type: Javadoc, dependsOn: tasks.getByPath(':doc_gen:jar')) {
    source = android.sourceSets.main.java.srcDirs
    destinationDir = file("build/myDocs/").absoluteFile

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile

    options.docletpath = [file('../doc_gen/build/libs/doc_gen.jar')]
    options.doclet = "com.github.privacystreams.PSDoclet"
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.compile
//    classpath += configurations.provided
//    destinationDir = file("build/docs/").absoluteFile
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
//        userOrg = bintrayOrganization
        desc = libraryDescription
        websiteUrl = siteUrl
        issueTrackerUrl = siteUrl+'/issues'
        vcsUrl = gitUrl
        licenses = allLicenses
        githubRepo = githubRepository //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        publish = false
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

